{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "58506b3b-ece1-40c9-bde5-c015a4dbf2d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-05 00:57:54.643 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Joshi\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-04-05 00:57:54.643 Session state does not function when running a script without `streamlit run`\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# --- Page Configuration ---\n",
    "st.set_page_config(page_title=\"Tube Bundle Analysis\", layout=\"wide\")\n",
    "\n",
    "st.header(\"Tube Bundle Fluid Elastic Instability & Natural Frequency Check\")\n",
    "\n",
    "# --- Tube Arrangement Selection ---\n",
    "tube_arrangement_options = {\n",
    "    \"Triangular (P/D = 1.25 - 1.5)\": (3.0, 5.0),\n",
    "    \"Triangular (P/D = 1.5 - 2.5)\": (4.0, 7.0),\n",
    "    \"Square (P/D = 1.25 - 1.5)\": (2.5, 4.5),\n",
    "    \"Square (P/D = 1.5 - 2.5)\": (3.5, 6.5),\n",
    "    \"Rotated Square (P/D = 1.25 - 1.5)\": (2.0, 4.0),\n",
    "    \"Rotated Square (P/D = 1.5 - 2.5)\": (3.0, 5.5)\n",
    "}\n",
    "\n",
    "layout_choice = st.selectbox(\"Select Tube Arrangement:\", list(tube_arrangement_options.keys()))\n",
    "K_min, K_max = tube_arrangement_options[layout_choice]\n",
    "K = (K_min + K_max) / 2\n",
    "st.write(f\"Selected Empirical Constant K = {K:.2f}\")\n",
    "\n",
    "# --- Input Section ---\n",
    "st.subheader(\"Material, Geometry, and Flow Inputs\")\n",
    "\n",
    "col1, col2 = st.columns(2)\n",
    "\n",
    "with col1:\n",
    "    D = st.number_input(\"Tube Outside Diameter (m)\", value=0.025)\n",
    "    t = st.number_input(\"Tube Thickness (m)\", value=0.0025)\n",
    "    L = st.number_input(\"Tube Length (m)\", value=1.0)\n",
    "    pitch = st.number_input(\"Tube Pitch (m)\", value=0.03)\n",
    "    E = st.number_input(\"Young’s Modulus (Pa)\", value=2.0e11, format=\"%.2e\")\n",
    "\n",
    "with col2:\n",
    "    rho_material = st.number_input(\"Tube Material Density (kg/m³)\", value=7850.0)\n",
    "    U_actual = st.number_input(\"Shell-side Flow Velocity (m/s)\", value=3.0)\n",
    "    rho_shell = st.number_input(\"Shell-side Fluid Density (kg/m³)\", value=1000.0)\n",
    "    baffle_spacing = st.number_input(\"Baffle Spacing (m)\", value=0.2)\n",
    "    diam_clearance = st.number_input(\"Diametral Clearance (m)\", value=0.001)\n",
    "\n",
    "# --- Calculations ---\n",
    "I = (np.pi / 64) * (D**4 - (D - 2*t)**4)\n",
    "m = rho_material * (np.pi * (D**2 - (D - 2*t)**2)) / 4\n",
    "\n",
    "f_n = (1 / (2 * np.pi)) * np.sqrt(E * I / (m * L**4))\n",
    "Uc = K * f_n * D\n",
    "\n",
    "# --- Results ---\n",
    "st.subheader(\"Analysis Results\")\n",
    "\n",
    "col1, col2 = st.columns(2)\n",
    "with col1:\n",
    "    st.metric(\"Natural Frequency (Hz)\", f\"{f_n:.2f}\")\n",
    "    st.metric(\"Critical Velocity (m/s)\", f\"{Uc:.2f}\")\n",
    "\n",
    "with col2:\n",
    "    if U_actual > Uc:\n",
    "        st.error(f\"🚨 Instability Occurs! (U = {U_actual} m/s > Uc = {Uc:.2f} m/s)\")\n",
    "    else:\n",
    "        st.success(f\"✅ Stable (U = {U_actual} m/s < Uc = {Uc:.2f} m/s)\")\n",
    "\n",
    "# --- Velocity Comparison Bar Chart ---\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar([\"Critical Velocity\", \"Actual Velocity\"], [Uc, U_actual], color=[\"blue\", \"red\"])\n",
    "ax.set_ylabel(\"Velocity (m/s)\")\n",
    "ax.set_title(\"Critical vs Actual Flow Velocity\")\n",
    "st.pyplot(fig)\n",
    "\n",
    "# --- Tube Layout ---\n",
    "st.subheader(\"Tube Bundle Layout\")\n",
    "layout_type = st.radio(\"Layout Type:\", [\"Square Pitch\", \"Triangular Pitch\"])\n",
    "rows, cols = (10, 10) if layout_type == \"Square Pitch\" else (12, 9)\n",
    "\n",
    "x, y = [], []\n",
    "for i in range(rows):\n",
    "    for j in range(cols):\n",
    "        x_pos = i * pitch\n",
    "        y_pos = j * pitch + (pitch / 2 if layout_type == \"Triangular Pitch\" and i % 2 else 0)\n",
    "        x.append(x_pos)\n",
    "        y.append(y_pos)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y, c='orange', edgecolors='black', s=80)\n",
    "ax.set_xlabel(\"X (m)\")\n",
    "ax.set_ylabel(\"Y (m)\")\n",
    "ax.set_title(f\"{layout_type} Tube Layout\")\n",
    "ax.axis(\"equal\")\n",
    "st.pyplot(fig)\n",
    "\n",
    "# --- Optional: Shell-Side Flow Visualization ---\n",
    "st.subheader(\"Shell-Side Flow Field (Simplified)\")\n",
    "x = np.linspace(0, 1, 10)\n",
    "y = np.linspace(0, 1, 10)\n",
    "X, Y = np.meshgrid(x, y)\n",
    "U = np.sin(2 * np.pi * X)\n",
    "V = np.cos(2 * np.pi * Y)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.quiver(X, Y, U, V)\n",
    "ax.set_title(\"Velocity Vector Field\")\n",
    "ax.set_xlabel(\"X\")\n",
    "ax.set_ylabel(\"Y\")\n",
    "st.pyplot(fig)\n",
    "\n",
    "st.markdown(\"Made with ❤️ in Streamlit & VS Code\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1734f1f5-03f8-407e-9d92-8f752e9de9f1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
